1. Right Code


class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        graph = collections.defaultdict(list)
        path = collections.defaultdict(int)
        
        for i in range(len(equations)):
            graph[equations[i][0]].append(equations[i][1])
            graph[equations[i][1]].append(equations[i][0])
            path[(equations[i][0],equations[i][1])] = values[i]
            path[(equations[i][1],equations[i][0])] = 1/values[i]
            
        def findPath(node1,node2,graph,visited):
            if node1 not in graph:
                return -1
            if node1==node2:
                return 1
            if node1 not in visited:
                visited.add(node1)
                for neighbor in graph[node1]:
                    dis = findPath(neighbor,node2,graph,visited)
                    if dis>0:
                        return path[node1,neighbor]*dis
            return -1
        res = []
        for node1, node2 in queries:
            res.append(findPath(node1,node2,graph,set()))
        return res
        
   2. Thoughts
   
   (1). I referred to the solution by Fuxuemingzhu, however, I think there are some redundant code
   
   (2). Notice this problem should be modeled as undirected, rather than directed graph
